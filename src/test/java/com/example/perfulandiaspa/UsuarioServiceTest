package com.example.perfulandiaspa;

import com.example.perfulandiaspa.model.Usuario;
import com.example.perfulandiaspa.repository.UsuarioRepository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.Optional;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class UsuarioServiceTest {

    private UsuarioRepository usuarioRepository;
    private UsuarioService usuarioService;

    @BeforeEach
    void setUp() {
        usuarioRepository = Mockito.mock(UsuarioRepository.class);
        usuarioService = new UsuarioService(usuarioRepository);
    }

    @Test
    void testFindAll() {
        Usuario u1 = new Usuario();
        u1.setUsername("admin");
        Usuario u2 = new Usuario();
        u2.setUsername("cliente");

        when(usuarioRepository.findAll()).thenReturn(Arrays.asList(u1, u2));

        List<Usuario> resultado = usuarioService.findAll();

        assertEquals(2, resultado.size());
        assertEquals("admin", resultado.get(0).getUsername());
        verify(usuarioRepository, times(1)).findAll();
    }

    @Test
    void testFindById() {
        Usuario usuario = new Usuario();
        usuario.setId(1);
        usuario.setUsername("admin");

        when(usuarioRepository.findById(1)).thenReturn(Optional.of(usuario));

        Optional<Usuario> resultado = usuarioService.findById(1);

        assertTrue(resultado.isPresent());
        assertEquals("admin", resultado.get().getUsername());
    }

    @Test
    void testCrearUsuario() {
        Usuario nuevoUsuario = new Usuario();
        nuevoUsuario.setUsername("nuevo");

        when(usuarioRepository.save(nuevoUsuario)).thenReturn(nuevoUsuario);

        Usuario guardado = usuarioService.crearUsuario(nuevoUsuario);

        assertEquals("nuevo", guardado.getUsername());
        verify(usuarioRepository, times(1)).save(nuevoUsuario);
    }

    @Test
    void testEliminarUsuario() {
        usuarioService.eliminarUsuario(5);
        verify(usuarioRepository, times(1)).deleteById(5);
    }

    @Test
    void testActualizarUsuario() {
        Usuario existente = new Usuario();
        existente.setId(1);
        existente.setUsername("viejo");
        existente.setEmail("viejo@mail.com");

        Usuario actualizado = new Usuario();
        actualizado.setUsername("nuevo");
        actualizado.setEmail("nuevo@mail.com");
        actualizado.setEnabled(true);

        when(usuarioRepository.findById(1)).thenReturn(Optional.of(existente));
        when(usuarioRepository.save(any(Usuario.class))).thenAnswer(invocation -> invocation.getArgument(0));

        Usuario resultado = usuarioService.actualizarUsuario(1, actualizado);

        assertEquals("nuevo", resultado.getUsername());
        assertEquals("nuevo@mail.com", resultado.getEmail());
        assertTrue(resultado.isEnabled());
    }
}
